// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String
  avatar     String?
  phone      String?
  bio        String?
  role       UserRole    @default(PLAYER)
  level      PadelLevel?
  experience Int? // years of experience
  location   String?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Coach specific fields
  certifications String[] // coach certifications
  hourlyRate     Decimal? // coaching rate per hour
  specialties    String[] // coaching specialties

  // Relations (for future features)
  sentRequests     FriendRequest[] @relation("RequestSender")
  receivedRequests FriendRequest[] @relation("RequestReceiver")

  @@map("users")
}

model FriendRequest {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  sender   User @relation("RequestSender", fields: [senderId], references: [id])
  receiver User @relation("RequestReceiver", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

enum UserRole {
  PLAYER
  COACH
}

enum PadelLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
